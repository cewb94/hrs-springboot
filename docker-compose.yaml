version: "2.4"   # Required so that depends_on: condition: service_healthy actually waits

services:
  postresql:
    image: postgres:16
    container_name: hrs-postgresql
    restart: unless-stopped

    environment:
      POSTGRES_DB: hrs_db
      POSTGRES_USER: hrs
      POSTGRES_PASSWORD: hrs_2025

    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./pg16_hrs_consolidated.sql:/docker-entrypoint-initdb.d/init.sql:ro

    # No "command:" override—Postgres uses the default port 5432 inside the container.
    ports:
      # Map host port 5442 -> container port 5432
      - "5442:5432"

    # Healthcheck ensures Postgres is actually listening on 5432 before we start "app".
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hrs -d hrs_db -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: hrs-redis
    restart: unless-stopped

    volumes:
      - redis_data:/data

    # Redis listens on its default 6379 inside the container.
    # Map host port 6390 -> container port 6379 (for host‐side debugging).
    ports:
      - "6390:6379"

    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: boot-render-deploy:latest
    container_name: hrs-app

    # Only start "app" after both Postgres and Redis pass their healthchecks
    depends_on:
      postresql:
        condition: service_healthy
      redis:
        condition: service_healthy

    restart: on-failure

    environment:
      # Ensures Spring Boot loads src/main/resources/application-docker.properties
      SPRING_PROFILES_ACTIVE: docker

    ports:
      - "8080:8080"

volumes:
  postgres_data:
  redis_data:
