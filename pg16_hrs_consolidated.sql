-- 1. Create the HRS role only if it doesn't already exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1
    FROM   pg_catalog.pg_roles
    WHERE  rolname = 'hrs'
  ) THEN
    CREATE ROLE hrs
      WITH LOGIN
           SUPERUSER;
  END IF;
END
$$;

-- 2. Create the HRS schema (skip if it exists) and make hrs its owner
CREATE SCHEMA IF NOT EXISTS hrs AUTHORIZATION hrs;

-- 3. Grant privileges on the schema
GRANT ALL ON SCHEMA hrs TO hrs;

-- 4. Set up default privileges for anything created by postgres in that schema
ALTER DEFAULT PRIVILEGES FOR ROLE hrs IN SCHEMA hrs
  GRANT ALL ON TABLES TO hrs;

ALTER DEFAULT PRIVILEGES FOR ROLE hrs IN SCHEMA hrs
  GRANT ALL ON SEQUENCES TO hrs;

ALTER DEFAULT PRIVILEGES FOR ROLE hrs IN SCHEMA hrs
  GRANT EXECUTE ON FUNCTIONS TO hrs;

ALTER DEFAULT PRIVILEGES FOR ROLE hrs IN SCHEMA hrs
  GRANT USAGE ON TYPES TO hrs;




-- ===============================================================
-- DDL - Create tables, views and other DB objects
-- ===============================================================
SET search_path TO hrs;

-- Drop existing views
DROP VIEW IF EXISTS hrs_asg_details_v CASCADE;
DROP VIEW IF EXISTS hrs_asg_details_v2 CASCADE;
DROP VIEW IF EXISTS hrs_asg_details_v3 CASCADE;
DROP VIEW IF EXISTS hrs_asg_emp_v CASCADE;
DROP VIEW IF EXISTS hrs_emp_sal_elem_details_v CASCADE;
DROP VIEW IF EXISTS hrs_emp_work_sch_details_v CASCADE;
DROP VIEW IF EXISTS hrs_latest_asg CASCADE;
DROP VIEW IF EXISTS hrs_latest_asg_details_v CASCADE;
DROP VIEW IF EXISTS hrs_sal_elem_details_v CASCADE;

-- Drop existing tables
DROP TABLE IF EXISTS hrs_salary_elements CASCADE;
DROP TABLE IF EXISTS hrs_salaries CASCADE;
DROP TABLE IF EXISTS hrs_payroll_results CASCADE;
DROP TABLE IF EXISTS hrs_payroll_runs CASCADE;
DROP TABLE IF EXISTS hrs_emp_work_schedules CASCADE;
DROP TABLE IF EXISTS hrs_emp_leave_entitlements CASCADE;
DROP TABLE IF EXISTS hrs_emp_absences CASCADE;
DROP TABLE IF EXISTS hrs_assignments CASCADE;
DROP TABLE IF EXISTS hrs_departments CASCADE;
DROP TABLE IF EXISTS hrs_work_schedules CASCADE;
DROP TABLE IF EXISTS hrs_employees CASCADE;
DROP TABLE IF EXISTS hrs_locations CASCADE;
DROP TABLE IF EXISTS hrs_jobs CASCADE;
DROP TABLE IF EXISTS hrs_grades CASCADE;
DROP TABLE IF EXISTS hrs_comp_elements CASCADE;
DROP TABLE IF EXISTS hrs_absence_type CASCADE;

-- Drop existing RBAC tables
DROP TABLE IF EXISTS hrs_users;
DROP TABLE IF EXISTS hrs_user_roles;

-- Create tables
CREATE TABLE hrs_absence_type (
    abs_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    abs_code VARCHAR(255),
    abs_name VARCHAR(255)
);

CREATE TABLE hrs_comp_elements (
    comp_elem_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    elem_name VARCHAR(255),
    elem_type VARCHAR(255),
    elem_val_method VARCHAR(255) DEFAULT 'Manual',
    elem_recurrence VARCHAR(255) DEFAULT 'Recurring',
    elem_code VARCHAR(255)
);

CREATE TABLE hrs_locations (
    loc_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    postal_code VARCHAR(4000),
    street_address VARCHAR(4000),
    city VARCHAR(4000),
    state VARCHAR(4000),
    country VARCHAR(4000)
);

CREATE TABLE hrs_jobs (
    job_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    job_code VARCHAR(255),
    job_title VARCHAR(4000)
);

CREATE TABLE hrs_grades (
    grade_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    grade_code VARCHAR(255),
    grade_name VARCHAR(255)
);

CREATE TABLE hrs_employees (
    emp_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    emp_number VARCHAR(255),
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    dob VARCHAR(4000),
    gender VARCHAR(4000),
    nationality VARCHAR(4000)
);

CREATE TABLE hrs_work_schedules (
    work_sch_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    work_sch_code VARCHAR(255),
    work_sch_name VARCHAR(255),
    clock_in_time VARCHAR(4000),
    clock_out_time VARCHAR(4000)
);

CREATE TABLE hrs_departments (
    dept_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    loc_id BIGINT,
    dept_name VARCHAR(255)
);

CREATE TABLE hrs_assignments (
    assi_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    dept_id BIGINT,
    job_id BIGINT,
    grade_id BIGINT,
    super_id BIGINT,
    emp_id BIGINT,
    assi_number VARCHAR(255),
    assi_action VARCHAR(255),
    eff_start_date DATE,
    eff_end_date DATE
);

CREATE TABLE hrs_emp_absences (
    emp_abs_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    emp_id BIGINT,
    start_date DATE,
    end_date DATE,
    abs_id BIGINT NOT NULL
);

CREATE TABLE hrs_emp_leave_entitlements (
    emp_lv_ent_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    emp_id BIGINT,
    ent_days_amount VARCHAR(4000),
    eff_start_date DATE,
    eff_end_date DATE
);

CREATE TABLE hrs_emp_work_schedules (
    emp_work_sch_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    work_sch_id BIGINT,
    emp_id BIGINT,
    eff_start_date DATE,
    eff_end_date DATE
);

CREATE TABLE hrs_salaries (
    sal_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    emp_id BIGINT,
    eff_start_date DATE,
    eff_end_date DATE
);

CREATE TABLE hrs_salary_elements (
    sal_elem_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    sal_id BIGINT,
    comp_elem_id BIGINT,
    amount NUMERIC,
    start_date DATE,
    end_date DATE
);

CREATE TABLE hrs_payroll_runs (
    pay_run_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    pay_run_period VARCHAR(255)
);

CREATE TABLE hrs_payroll_results (
    pay_res_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    pay_run_id BIGINT,
    sal_elem_id BIGINT,
    emp_id BIGINT,
    pay_res_elem_name VARCHAR(255)
);

-- Foreign Key Constraints
ALTER TABLE hrs_assignments
    ADD CONSTRAINT hrs_assignments_dept_id_fk
        FOREIGN KEY (dept_id) REFERENCES hrs_departments (dept_id);

ALTER TABLE hrs_assignments
    ADD CONSTRAINT hrs_assignments_emp_id_fk
        FOREIGN KEY (emp_id) REFERENCES hrs_employees (emp_id);

ALTER TABLE hrs_assignments
    ADD CONSTRAINT hrs_assignments_grade_id_fk
        FOREIGN KEY (grade_id) REFERENCES hrs_grades (grade_id);

ALTER TABLE hrs_assignments
    ADD CONSTRAINT hrs_assignments_job_id_fk
        FOREIGN KEY (job_id) REFERENCES hrs_jobs (job_id);

ALTER TABLE hrs_assignments
    ADD CONSTRAINT hrs_assignments_super_id_fk
        FOREIGN KEY (super_id) REFERENCES hrs_employees (emp_id);

ALTER TABLE hrs_departments
    ADD CONSTRAINT hrs_dept_loc_fk
        FOREIGN KEY (loc_id) REFERENCES hrs_locations (loc_id) ON DELETE SET NULL;

ALTER TABLE hrs_emp_absences
    ADD CONSTRAINT hrs_emp_absences_emp_id_fk
        FOREIGN KEY (emp_id) REFERENCES hrs_employees (emp_id);

ALTER TABLE hrs_emp_absences
    ADD CONSTRAINT hrs_emp_absences_abs_id_fk
        FOREIGN KEY (abs_id) REFERENCES hrs_absence_type (abs_id);

ALTER TABLE hrs_emp_leave_entitlements
    ADD CONSTRAINT hrs_emp_leave_entitlements_emp_id_fk
        FOREIGN KEY (emp_id) REFERENCES hrs_employees (emp_id);

ALTER TABLE hrs_emp_work_schedules
    ADD CONSTRAINT hrs_emp_work_schedules_emp_id_fk
        FOREIGN KEY (emp_id) REFERENCES hrs_employees (emp_id);

ALTER TABLE hrs_emp_work_schedules
    ADD CONSTRAINT hrs_emp_work_schedules_work_sch_id_fk
        FOREIGN KEY (work_sch_id) REFERENCES hrs_work_schedules (work_sch_id);

ALTER TABLE hrs_salaries
    ADD CONSTRAINT hrs_salaries_emp_id_fk
        FOREIGN KEY (emp_id) REFERENCES hrs_employees (emp_id);

ALTER TABLE hrs_salary_elements
    ADD CONSTRAINT hrs_salary_elements_comp_elem_id_fk
        FOREIGN KEY (comp_elem_id) REFERENCES hrs_comp_elements (comp_elem_id);

ALTER TABLE hrs_salary_elements
    ADD CONSTRAINT hrs_salary_elements_sal_id_fk
        FOREIGN KEY (sal_id) REFERENCES hrs_salaries (sal_id);

ALTER TABLE hrs_payroll_results
    ADD CONSTRAINT hrs_payroll_results_emp_id_fk
        FOREIGN KEY (emp_id) REFERENCES hrs_employees (emp_id);

ALTER TABLE hrs_payroll_results
    ADD CONSTRAINT hrs_payroll_results_pay_run_id_fk
        FOREIGN KEY (pay_run_id) REFERENCES hrs_payroll_runs (pay_run_id);

ALTER TABLE hrs_payroll_results
    ADD CONSTRAINT hrs_payroll_results_sal_elem_id_fk
        FOREIGN KEY (sal_elem_id) REFERENCES hrs_salary_elements (sal_elem_id);

-- Indexes
CREATE UNIQUE INDEX IF NOT EXISTS hrs_absence_type_abs_id_pk
    ON hrs_absence_type (abs_id);

CREATE UNIQUE INDEX IF NOT EXISTS hrs_assignments_assi_id_pk
    ON hrs_assignments (assi_id);

CREATE INDEX IF NOT EXISTS hrs_assignments_i1
    ON hrs_assignments (dept_id);

CREATE INDEX IF NOT EXISTS hrs_assignments_i2
    ON hrs_assignments (job_id);

CREATE INDEX IF NOT EXISTS hrs_assignments_i3
    ON hrs_assignments (grade_id);

CREATE INDEX IF NOT EXISTS hrs_assignments_i4
    ON hrs_assignments (super_id);

CREATE INDEX IF NOT EXISTS hrs_assignments_i5
    ON hrs_assignments (emp_id);

CREATE UNIQUE INDEX IF NOT EXISTS hrs_comp_elements_comp_elem_id_pk
    ON hrs_comp_elements (comp_elem_id);

CREATE UNIQUE INDEX IF NOT EXISTS hrs_departments_dept_id_pk
    ON hrs_departments (dept_id);

CREATE INDEX IF NOT EXISTS hrs_departments_i1
    ON hrs_departments (loc_id);

CREATE UNIQUE INDEX IF NOT EXISTS hrs_employees_emp_id_pk
    ON hrs_employees (emp_id);

CREATE UNIQUE INDEX IF NOT EXISTS hrs_emp_absences_emp_abs_id_pk
    ON hrs_emp_absences (emp_abs_id);

CREATE INDEX IF NOT EXISTS hrs_emp_absences_i1
    ON hrs_emp_absences (emp_id);

CREATE UNIQUE INDEX IF NOT EXISTS hrs_emp_leave_entitlements_emp_lv_ent_id_pk
    ON hrs_emp_leave_entitlements (emp_lv_ent_id);

CREATE INDEX IF NOT EXISTS hrs_emp_leave_entitlements_i1
    ON hrs_emp_leave_entitlements (emp_id);

CREATE UNIQUE INDEX IF NOT EXISTS hrs_emp_work_schedules_emp_work_sch_id_pk
    ON hrs_emp_work_schedules (emp_work_sch_id);

CREATE INDEX IF NOT EXISTS hrs_emp_work_schedules_i1
    ON hrs_emp_work_schedules (work_sch_id);

CREATE INDEX IF NOT EXISTS hrs_emp_work_schedules_i2
    ON hrs_emp_work_schedules (emp_id);

CREATE UNIQUE INDEX IF NOT EXISTS hrs_grades_grade_id_pk
    ON hrs_grades (grade_id);

CREATE UNIQUE INDEX IF NOT EXISTS hrs_jobs_job_id_pk
    ON hrs_jobs (job_id);

CREATE UNIQUE INDEX IF NOT EXISTS hrs_locations_loc_id_pk
    ON hrs_locations (loc_id);

CREATE INDEX IF NOT EXISTS hrs_payroll_results_i1
    ON hrs_payroll_results (pay_run_id);

CREATE INDEX IF NOT EXISTS hrs_payroll_results_i2
    ON hrs_payroll_results (sal_elem_id);

CREATE INDEX IF NOT EXISTS hrs_payroll_results_i3
    ON hrs_payroll_results (emp_id);

CREATE UNIQUE INDEX IF NOT EXISTS hrs_payroll_results_pay_res_id_pk
    ON hrs_payroll_results (pay_res_id);

CREATE UNIQUE INDEX IF NOT EXISTS hrs_payroll_runs_pay_run_id_pk
    ON hrs_payroll_runs (pay_run_id);

CREATE INDEX IF NOT EXISTS hrs_salaries_i1
    ON hrs_salaries (emp_id);

CREATE UNIQUE INDEX IF NOT EXISTS hrs_salaries_sal_id_pk
    ON hrs_salaries (sal_id);

CREATE INDEX IF NOT EXISTS hrs_salary_elements_i1
    ON hrs_salary_elements (sal_id);

CREATE INDEX IF NOT EXISTS hrs_salary_elements_i2
    ON hrs_salary_elements (comp_elem_id);

CREATE UNIQUE INDEX IF NOT EXISTS hrs_salary_elements_sal_elem_id_pk
    ON hrs_salary_elements (sal_elem_id);

CREATE UNIQUE INDEX IF NOT EXISTS hrs_work_schedules_work_sch_id_pk
    ON hrs_work_schedules (work_sch_id);

-- Views
CREATE OR REPLACE VIEW hrs_asg_details_v AS
SELECT
    asg.assi_id,
    asg.dept_id,
    asg.job_id,
    asg.grade_id,
    asg.emp_id,
    asg.assi_number,
    asg.assi_action,
    asg.eff_start_date,
    asg.eff_end_date,
    emp.emp_number,
    emp.first_name || ' ' || emp.last_name AS full_name,
    jb.job_code,
    jb.job_title,
    grd.grade_code,
    grd.grade_name,
    asg.super_id AS supervisor_id,
    (
      SELECT e1.first_name || ' ' || e1.last_name
      FROM hrs_employees e1
      WHERE e1.emp_id = asg.super_id
    ) AS supervisor_name
FROM
    hrs_assignments AS asg
    LEFT JOIN hrs_employees AS emp
      ON asg.emp_id = emp.emp_id
    LEFT JOIN hrs_jobs AS jb
      ON asg.job_id = jb.job_id
    LEFT JOIN hrs_grades AS grd
      ON asg.grade_id = grd.grade_id;

CREATE OR REPLACE VIEW hrs_asg_details_v2 AS
SELECT
    asg.assi_id,
    asg.dept_id,
    asg.job_id,
    asg.grade_id,
    asg.emp_id,
    asg.assi_number,
    asg.assi_action,
    asg.eff_start_date,
    asg.eff_end_date,
    emp.emp_number,
    emp.first_name || ' ' || emp.last_name AS full_name,
    jb.job_code,
    jb.job_title,
    grd.grade_code,
    grd.grade_name,
    asg.super_id AS supervisor_id,
    (
      SELECT e1.first_name || ' ' || e1.last_name
      FROM hrs_employees e1
      WHERE e1.emp_id = asg.super_id
    ) AS supervisor_name,
    dept.dept_name AS department_name
FROM
    hrs_assignments AS asg
    LEFT JOIN hrs_employees AS emp
      ON asg.emp_id = emp.emp_id
    LEFT JOIN hrs_jobs AS jb
      ON asg.job_id = jb.job_id
    LEFT JOIN hrs_grades AS grd
      ON asg.grade_id = grd.grade_id
    LEFT JOIN hrs_departments AS dept
      ON asg.dept_id = dept.dept_id;

CREATE OR REPLACE VIEW hrs_asg_details_v3 AS
SELECT
    asg.assi_id,
    asg.dept_id,
    asg.job_id,
    asg.grade_id,
    asg.emp_id,
    asg.assi_number,
    asg.assi_action,
    asg.eff_start_date,
    asg.eff_end_date,
    emp.emp_number,
    emp.first_name || ' ' || emp.last_name AS full_name,
    jb.job_code,
    jb.job_title,
    grd.grade_code,
    grd.grade_name,
    asg.super_id AS supervisor_id,
    (
      SELECT e1.first_name || ' ' || e1.last_name
      FROM hrs_employees e1
      WHERE e1.emp_id = asg.super_id
    ) AS supervisor_name,
    dept.dept_name AS department_name,
    sal.sal_id,
    sal.eff_start_date AS sal_start_date,
    sal.eff_end_date AS sal_end_date
FROM
    hrs_assignments AS asg
    LEFT JOIN hrs_employees AS emp
      ON asg.emp_id = emp.emp_id
    LEFT JOIN hrs_jobs AS jb
      ON asg.job_id = jb.job_id
    LEFT JOIN hrs_grades AS grd
      ON asg.grade_id = grd.grade_id
    LEFT JOIN hrs_departments AS dept
      ON asg.dept_id = dept.dept_id
    LEFT JOIN hrs_salaries AS sal
      ON asg.emp_id = sal.emp_id;

CREATE OR REPLACE VIEW hrs_asg_emp_v AS
SELECT
    asg.assi_id,
    asg.dept_id,
    asg.job_id,
    asg.grade_id,
    asg.super_id,
    asg.emp_id,
    asg.assi_number,
    asg.assi_action,
    asg.eff_start_date,
    asg.eff_end_date,
    emp.emp_number,
    emp.first_name || ' ' || emp.last_name AS full_name
FROM
    hrs_assignments AS asg
    LEFT JOIN hrs_employees AS emp
      ON asg.emp_id = emp.emp_id;

CREATE OR REPLACE VIEW hrs_emp_sal_elem_details_v AS
SELECT
    sal.eff_start_date,
    sal.eff_end_date,
    elem.sal_elem_id,
    elem.sal_id,
    elem.start_date,
    elem.end_date,
    elem.amount,
    elem.comp_elem_id,
    cmp.elem_code,
    cmp.elem_name,
    cmp.elem_type,
    cmp.elem_val_method,
    cmp.elem_recurrence,
    emp.emp_number,
    emp.first_name || ' ' || emp.last_name AS full_name
FROM
    hrs_salary_elements AS elem
    LEFT JOIN hrs_salaries AS sal
      ON elem.sal_id = sal.sal_id
    LEFT JOIN hrs_comp_elements AS cmp
      ON elem.comp_elem_id = cmp.comp_elem_id
    LEFT JOIN hrs_employees AS emp
      ON sal.emp_id = emp.emp_id;

CREATE OR REPLACE VIEW hrs_emp_work_sch_details_v AS
SELECT
    emp_ws.emp_work_sch_id,
    emp_ws.work_sch_id,
    emp_ws.emp_id,
    emp_ws.eff_start_date,
    emp_ws.eff_end_date,
    ws.work_sch_code,
    ws.work_sch_name,
    ws.clock_in_time,
    ws.clock_out_time
FROM
    hrs_emp_work_schedules AS emp_ws
    LEFT JOIN hrs_work_schedules AS ws
      ON emp_ws.work_sch_id = ws.work_sch_id;

CREATE OR REPLACE VIEW hrs_latest_asg AS
SELECT
    asg.assi_id,
    asg.dept_id,
    asg.job_id,
    asg.grade_id,
    asg.super_id,
    asg.emp_id,
    asg.assi_number,
    asg.assi_action,
    asg.eff_start_date,
    asg.eff_end_date
FROM
    hrs_assignments AS asg
WHERE
    asg.eff_end_date = (
      SELECT MAX(lat.eff_end_date)
      FROM hrs_assignments AS lat
      WHERE lat.emp_id = asg.emp_id
    );

CREATE OR REPLACE VIEW hrs_latest_asg_details_v AS
SELECT
    lasg.assi_id,
    lasg.dept_id,
    lasg.job_id,
    lasg.grade_id,
    lasg.super_id,
    lasg.emp_id,
    lasg.assi_number,
    lasg.assi_action,
    lasg.eff_start_date,
    lasg.eff_end_date,
    asgd.emp_number,
    asgd.full_name,
    asgd.job_code,
    asgd.job_title,
    asgd.grade_code,
    asgd.grade_name,
    asgd.supervisor_name,
    asgd.department_name
FROM
    hrs_latest_asg AS lasg
    LEFT JOIN hrs_asg_details_v2 AS asgd
      ON lasg.assi_id = asgd.assi_id;

CREATE OR REPLACE VIEW hrs_sal_elem_details_v AS
SELECT
    sal.eff_start_date,
    sal.eff_end_date,
    elem.sal_elem_id,
    elem.sal_id,
    elem.comp_elem_id,
    cmp.elem_code,
    cmp.elem_name,
    cmp.elem_type,
    cmp.elem_val_method,
    cmp.elem_recurrence
FROM
    hrs_salary_elements AS elem
    LEFT JOIN hrs_salaries AS sal
      ON elem.sal_id = sal.sal_id
    LEFT JOIN hrs_comp_elements AS cmp
      ON elem.comp_elem_id = cmp.comp_elem_id;

-- RBAC
CREATE TABLE hrs_users (
  user_id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_name  VARCHAR(255) UNIQUE NOT NULL,
  password  VARCHAR(255) NOT NULL
);

CREATE TABLE hrs_user_roles (
  user_role_id  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id BIGINT REFERENCES hrs_users(user_id) ON DELETE CASCADE,
  role    VARCHAR(50) NOT NULL
);

-- Insert user with admin role
-- INSERT INTO hrs.hrs_users (user_name, password) values ('admin', 'admin');

-- INSERT INTO hrs.hrs_user_roles (user_id, role)
-- SELECT u.user_id, 'ADMIN'
-- FROM hrs.hrs_users u WHERE u.user_name = 'admin';

-- ===============================================================
-- 1. Insert sample data into hrs.hrs_locations
-- ===============================================================
INSERT INTO hrs.hrs_locations (postal_code, street_address, city, state, country)
VALUES
  -- Head Office
  ('13124', 'Sharq Omar Ibn Al Khattab Street, Arraya Tower M1 – 13th P.O.Box: 26389', 'Kuwait City', 'Al Asimah', 'Kuwait'),
  -- Branch 1 (Salmiya)
  ('13023', 'Block 3, Museum Street, Salmiya',      'Salmiya',            'Hawalli',        'Kuwait'),
  -- Branch 2 (Al Jahra)
  ('32001', 'Block 2, Al Jahra Highway, Al Jahra',   'Al Jahra',           'Al Jahra',       'Kuwait'),
  -- Branch 3 (Hawalli)
  ('32002', 'Block 4, Farada Street, Hawalli',       'Hawalli',            'Hawalli',        'Kuwait'),
  -- Branch 4 (Farwaniya)
  ('81001', 'Block 7, Al Rihab Street, Farwaniya',   'Farwaniya',          'Al Farwaniya',   'Kuwait'),
  -- Branch 5 (Ahmadi)
  ('63001', 'Block 9, Industrial Street, Ahmadi',    'Ahmadi',             'Al Ahmadi',      'Kuwait'),
  -- Branch 6 (Sabah Al Salem)
  ('61001', 'Block 11, Abdullah Al-Mubarak Street, Sabah Al Salem', 'Sabah Al Salem', 'Mubarak Al-Kabeer', 'Kuwait'),
  -- Branch 7 (Khaitan)
  ('32003', 'Block 12, Khaitan Street, Khaitan',     'Khaitan',            'Hawalli',        'Kuwait'),
  -- Branch 8 (Salwa)
  ('22002', 'Block 2, Salwa Road, Salwa',            'Salwa',              'Al Farwaniya',   'Kuwait'),
  -- Branch 9 (Mangaf)
  ('63002', 'Block 8, Gulf Road, Mangaf',            'Mangaf',             'Al Ahmadi',      'Kuwait'),
  -- Branch 10 (Jleeb Al-Shuyoukh)
  ('42001', 'Block 5, Shuwaikh Street, Jleeb Al-Shuyoukh', 'Jleeb Al-Shuyoukh', 'Hawalli',      'Kuwait'),
  -- Branch 11 (Mahboula)
  ('63003', 'Block 3, Mahboula Street, Mahboula',    'Mahboula',           'Al Ahmadi',      'Kuwait'),
  -- Branch 12 (Fahaheel)
  ('63004', 'Block 1, Fahaheel Highway, Fahaheel',    'Fahaheel',           'Al Ahmadi',      'Kuwait');


-- ===============================================================
-- 2. Insert one sample schedule into hrs.hrs_work_schedules
-- ===============================================================
INSERT INTO hrs.hrs_work_schedules (work_sch_code, work_sch_name, clock_in_time, clock_out_time)
VALUES
  ('std_8_16', 'Standard 8:00-16:00 Schedule', '08:00', '16:00');


-- ===============================================================
-- 3. Insert sample data into hrs.hrs_grades
--     12 grades for Head Office (HO1–HO12) and 12 for Branches (BR1–BR12)
-- ===============================================================
INSERT INTO hrs.hrs_grades (grade_code, grade_name)
VALUES
  -- Head Office Grades
  ('HO1',  'HO Grade 1'),
  ('HO2',  'HO Grade 2'),
  ('HO3',  'HO Grade 3'),
  ('HO4',  'HO Grade 4'),
  ('HO5',  'HO Grade 5'),
  ('HO6',  'HO Grade 6'),
  ('HO7',  'HO Grade 7'),
  ('HO8',  'HO Grade 8'),
  ('HO9',  'HO Grade 9'),
  ('HO10', 'HO Grade 10'),
  ('HO11', 'HO Grade 11'),
  ('HO12', 'HO Grade 12'),
  -- Branch Grades
  ('BR1',  'Branch Grade 1'),
  ('BR2',  'Branch Grade 2'),
  ('BR3',  'Branch Grade 3'),
  ('BR4',  'Branch Grade 4'),
  ('BR5',  'Branch Grade 5'),
  ('BR6',  'Branch Grade 6'),
  ('BR7',  'Branch Grade 7'),
  ('BR8',  'Branch Grade 8'),
  ('BR9',  'Branch Grade 9'),
  ('BR10', 'Branch Grade 10'),
  ('BR11', 'Branch Grade 11'),
  ('BR12', 'Branch Grade 12');


-- ===============================================================
-- 4. Insert sample data into hrs.hrs_absence_type
--     (Using common Kuwait absence types as reference)
-- ===============================================================
INSERT INTO hrs.hrs_absence_type (abs_code, abs_name)
VALUES
  ('ANNUAL_LEAVE',        'Annual Leave'),
  ('SICK_LEAVE',          'Sick Leave'),
  ('MATERNITY_LEAVE',     'Maternity Leave'),
  ('PATERNITY_LEAVE',     'Paternity Leave'),
  ('HAJJ_LEAVE',          'Hajj Leave'),
  ('COMPASSIONATE_LEAVE', 'Compassionate Leave'),
  ('UNPAID_LEAVE',        'Unpaid Leave'),
  ('STUDY_LEAVE',         'Study Leave'),
  ('MARRIAGE_LEAVE',      'Marriage Leave'),
  ('EMERGENCY_LEAVE',     'Emergency Leave');


-- ===============================================================
-- 5. Insert sample data into hrs.hrs_departments
--     12 departments for Head Office (LOC_ID = 1), plus 2 for branches
-- ===============================================================
-- Note: loc_id = 1 is the Head Office inserted above.
--       loc_id = 2 and loc_id = 3 correspond to two branch offices.
INSERT INTO hrs.hrs_departments (loc_id, dept_name)
VALUES
  -- Head Office Departments (all with loc_id = 1)
  (1, 'Human Resources'),
  (1, 'Information Technology'),
  (1, 'Finance'),
  (1, 'Operations'),
  (1, 'Risk Management'),
  (1, 'Compliance'),
  (1, 'Marketing'),
  (1, 'Customer Service'),
  (1, 'Treasury'),
  (1, 'Legal'),
  (1, 'Internal Audit'),
  (1, 'Procurement'),
  -- Branch Departments
  (2, 'Branch Banking'),    -- Branch at loc_id = 2
  (3, 'Loan Services');     -- Branch at loc_id = 3


-- ===============================================================
-- 6. Insert sample data into hrs.hrs_jobs
--     50 jobs appropriate for banking sector departments
-- ===============================================================
INSERT INTO hrs.hrs_jobs (job_code, job_title)
VALUES
  -- HR Department (4)
  ('HR_MANAGER',                    'HR Manager'),
  ('HR_COORDINATOR',                'HR Coordinator'),
  ('TALENT_ACQUISITION_SPECIALIST', 'Talent Acquisition Specialist'),
  ('HR_GENERALIST',                 'HR Generalist'),
  -- IT Department (4)
  ('IT_MANAGER',                    'IT Manager'),
  ('SYSTEMS_ANALYST',               'Systems Analyst'),
  ('NETWORK_ADMINISTRATOR',         'Network Administrator'),
  ('DATABASE_ADMINISTRATOR',        'Database Administrator'),
  -- Finance Department (4)
  ('FINANCE_MANAGER',               'Finance Manager'),
  ('ACCOUNTANT',                    'Accountant'),
  ('CONTROLLER',                    'Financial Controller'),
  ('PAYROLL_SPECIALIST',            'Payroll Specialist'),
  -- Operations Department (4)
  ('OPERATIONS_MANAGER',            'Operations Manager'),
  ('BUSINESS_ANALYST',              'Business Analyst'),
  ('PROCESS_IMPROVEMENT_SPECIALIST','Process Improvement Specialist'),
  ('OPERATIONS_COORDINATOR',        'Operations Coordinator'),
  -- Risk Management (3)
  ('RISK_MANAGER',                  'Risk Manager'),
  ('RISK_ANALYST',                  'Risk Analyst'),
  ('CREDIT_RISK_OFFICER',           'Credit Risk Officer'),
  -- Compliance (3)
  ('COMPLIANCE_OFFICER',            'Compliance Officer'),
  ('AML_SPECIALIST',                'AML Specialist'),
  ('REGULATORY_AFFAIRS_SPECIALIST', 'Regulatory Affairs Specialist'),
  -- Marketing (3)
  ('MARKETING_MANAGER',             'Marketing Manager'),
  ('DIGITAL_MARKETING_SPECIALIST',  'Digital Marketing Specialist'),
  ('BRAND_MANAGER',                 'Brand Manager'),
  -- Customer Service (3)
  ('CUSTOMER_SERVICE_MANAGER',      'Customer Service Manager'),
  ('CALL_CENTER_SUPERVISOR',        'Call Center Supervisor'),
  ('CUSTOMER_RELATIONS_OFFICER',    'Customer Relations Officer'),
  -- Treasury (3)
  ('TREASURY_MANAGER',              'Treasury Manager'),
  ('TREASURY_ANALYST',              'Treasury Analyst'),
  ('CASH_MANAGER',                  'Cash Manager'),
  -- Legal (3)
  ('LEGAL_COUNSEL',                 'Legal Counsel'),
  ('CORPORATE_LAWYER',              'Corporate Lawyer'),
  ('CONTRACTS_SPECIALIST',          'Contracts Specialist'),
  -- Internal Audit (3)
  ('INTERNAL_AUDITOR',              'Internal Auditor'),
  ('IT_AUDITOR',                    'IT Auditor'),
  ('COMPLIANCE_AUDITOR',            'Compliance Auditor'),
  -- Procurement (3)
  ('PROCUREMENT_MANAGER',           'Procurement Manager'),
  ('PURCHASING_OFFICER',            'Purchasing Officer'),
  ('SUPPLIER_RELATIONS_SPECIALIST', 'Supplier Relations Specialist'),
  -- Branch Banking (5)
  ('BRANCH_MANAGER',                'Branch Manager'),
  ('TELLER',                        'Bank Teller'),
  ('CUSTOMER_SERVICE_REP',          'Customer Service Representative'),
  ('RELATIONSHIP_MANAGER',          'Relationship Manager'),
  ('BRANCH_OPERATIONS_OFFICER',     'Branch Operations Officer'),
  -- Loan Services (5)
  ('LOAN_OFFICER',                  'Loan Officer'),
  ('CREDIT_ANALYST',                'Credit Analyst'),
  ('MORTGAGE_SPECIALIST',           'Mortgage Specialist'),
  ('LOAN_PROCESSOR',                'Loan Processor'),
  ('COLLECTION_SPECIALIST',         'Collection Specialist');
